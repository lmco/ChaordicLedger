name: CI

on: [push]

env:
  DOCKER_REGIRSTY_HOST: ghcr.io
  DOCKER_REGISTRY: ghcr.io/lmco/chaordicledger
  GENERATED_CODE_DIR: generated
  SWAGGER_CODEGEN_CLI_SOURCE_JAR: https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.19/swagger-codegen-cli-2.4.19.jar
  SWAGGER_CODEGEN_CLI_LOCAL_JAR: swagger-codegen-cli.jar
  SWAGGER_API_FILE: api/swagger.json
  OUT_GO: out/go
  OUT_JAVA: out/java
jobs:
  build:
    # Reference: https://github.com/swagger-api/swagger-codegen/blob/master/standalone-gen-dev/standalone-generator-development.md
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: API Generation Setup
        run: |
          wget ${{ env.SWAGGER_CODEGEN_CLI_SOURCE_JAR }} -O ${{ env.SWAGGER_CODEGEN_CLI_LOCAL_JAR }}
      - name: API Generation - GO
        run: |
          mkdir -p ${{ env.OUT_GO }}
          java -jar ${{ env.SWAGGER_CODEGEN_CLI_LOCAL_JAR }} generate -i ${{ env.SWAGGER_API_FILE }} -l go -o ${{ env.OUT_GO }}
      - name: Archive generated GO code
        uses: actions/upload-artifact@v3
        with:
          name: go-api
          path: ${{ env.OUT_GO }}
      - name: API Generation - Java
        run: |
          mkdir -p ${OUT_JAVA}
          java -jar ${{ env.SWAGGER_CODEGEN_CLI_LOCAL_JAR }} generate -i ${{ env.SWAGGER_API_FILE }} -l java -o ${{ env.OUT_JAVA }}
      - name: Archive generated JAVA code
        uses: actions/upload-artifact@v3
        with:
          name: java-api
          path: ${{ env.OUT_JAVA }}

  docker-API-UI:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: swagger-ui
      IMAGE_VERSION: 0.0.1
      # TAG: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build --tag ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }} api/

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.DOCKER_REGIRSTY_HOST }} -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}

  docker-metadata-chaincode:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: metadata-chaincode
      IMAGE_VERSION: v0.0.0
      # TAG: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_VERSION }}
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build --tag ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }} chaincode/artifact-metadata/docker/

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.DOCKER_REGIRSTY_HOST }} -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
    # steps:
    #   -
    #     name: Set up QEMU
    #     uses: docker/setup-qemu-action@v1
    #   -
    #     name: Set up Docker Buildx
    #     uses: docker/setup-buildx-action@v1
    #   -
    #     name: Login to DockerHub
    #     uses: docker/login-action@v1 
    #     with:
    #       registry: ghcr.io
    #       username: ${{ github.actor }}
    #       password: ${{ secrets.GITHUB_TOKEN }}
    #   -
    #     name: Build and push
    #     uses: docker/build-push-action@v2
    #     with:
    #       context: "{{defaultContext}}:api"
    #       push: true
    #       tags: |
    #         ghcr.io/chaordicledger/swagger-ui:latest
    #         ghcr.io/chaordicledger/swagger-ui:0.0.1

  # References: https://hyperledger-fabric.readthedocs.io/en/latest/getting_started.html
  #             https://github.com/hyperledger/fabric-samples/tree/main/test-network-k8s
  # prerequisites:
  #   runs-on: ubuntu-latest
  #   env:
  #     AGNOSTIC_SETUP_DIR: setup/agnostic
  #     AGNOSTIC_CLEANUP_DIR: cleanup/agnostic
  #     UBUNTU_SETUP_DIR: setup/ubuntu
  #     RHEL_SETUP_DIR: setup/rhel
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Setup local
  #     run: |
  #       source ${AGNOSTIC_SETUP_DIR}/local_source
  #       ${AGNOSTIC_SETUP_DIR}/local_setup.sh
  #   - name: Get kubectl
  #     run: ${AGNOSTIC_SETUP_DIR}/get_kubectl.sh
  #   - name: Get kind
  #     run: ${AGNOSTIC_SETUP_DIR}/get_kind.sh
  #   - name: Get jq
  #     run: ${AGNOSTIC_SETUP_DIR}/get_jq.sh
  #   - name: Update package manager
  #     run: ${UBUNTU_SETUP_DIR}/update_package_manager.sh
  #   - name: Get prerequisite tools
  #     run: ${UBUNTU_SETUP_DIR}/get_prerequisite_tools.sh
  #   - name: Get Docker
  #     run: ${UBUNTU_SETUP_DIR}/get_docker.sh
  #   - name: Setup Docker
  #     run: ${AGNOSTIC_SETUP_DIR}/setup_docker.sh
  #   - name: Setup Test Network for Hyperledger
  #     run: ${AGNOSTIC_SETUP_DIR}/setup_hyperledger.sh
  #   - name: Cleanup
  #     run: ${AGNOSTIC_CLEANUP_DIR}/cleanup_hyperledger.sh

  # test:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install shellspec
  #     run: curl -fsSL https://git.io/shellspec | sh -s 0.28.1 --yes
  #   - name: Execute shellspec
  #     run: shellspec

  # PrerequisiteRootCA:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Create Root Certificate Authority (CA)
  #     env:
  #       ROOT_PASSPHRASE: ${{ secrets.ROOT_PASSPHRASE }}
  #     run: |
  #       ROOT_RESULTS_FILE_NAME="rootCAResults.json"
  #       COUNTRY_CODE="AU"
  #       STATE="WA"
  #       LOCATION="Northbridge"
  #       ORGANIZATION="Hotels"
  #       ORGANIZATIONAL_UNIT="Fancy"
  #       ROOT_COMMON_NAME="Yet another root cert authority"
  #       OUTPUT_DIR="."
        
  #       ./certificates/generateRootCA/bin/generateRootCA.sh -f "$ROOT_RESULTS_FILE_NAME" -p "$ROOT_PASSPHRASE" -o "$OUTPUT_DIR" -c "$COUNTRY_CODE" -s "$STATE" -l "$LOCATION" -r "$ORGANIZATION" -u "$ORGANIZATIONAL_UNIT" -n "$ROOT_COMMON_NAME"
  #       openssl x509 -text -noout -in rootCACert.pem

  # docker:
  #   #needs: PrerequisiteRootCA
  #   runs-on: ubuntu-latest
  #   services:
  #     registry:
  #       image: registry:2
  #       ports:
  #         - 5000:5000
  #   steps:
  #     -
  #       name: Checkout
  #       uses: actions/checkout@v2
  #     -
  #       name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #     -
  #       name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #       with:
  #         driver-opts: network=host
  #     -
  #       name: Build and push to local registry
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         push: true
  #         tags: localhost:5000/name/chaordic-ledger:latest
  #         #tags: localhost:5000/name/chaordic-ledger:$(date +%s)
  #     -
  #       name: Inspect
  #       run: |
  #         docker buildx imagetools inspect localhost:5000/name/chaordic-ledger:latest

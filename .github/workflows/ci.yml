name: CI

on: [push]

env:
  WORKING_DIR: $PWD

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: API Generation Setup
      run: |
        # Reference: https://github.com/swagger-api/swagger-codegen/blob/master/standalone-gen-dev/standalone-generator-development.md
        wget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.19/swagger-codegen-cli-2.4.19.jar -O swagger-codegen-cli.jar
        java -jar swagger-codegen-cli.jar meta -o output/myLibrary -n myClientCodegen -p com.my.company.codegen

        # project dir
        TARGET_DIR=/tmp/codegen/mygenerator
        mkdir -p $TARGET_DIR
        cd $TARGET_DIR
        # generated code location
        GENERATED_CODE_DIR=generated
        mkdir -p $GENERATED_CODE_DIR
        # download desired version
        wget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.19/swagger-codegen-cli-2.4.19.jar -O swagger-codegen-cli.jar
        wget https://raw.githubusercontent.com/swagger-api/swagger-codegen/master/standalone-gen-dev/docker-stub.sh -O docker-stub.sh
        wget https://raw.githubusercontent.com/swagger-api/swagger-codegen/master/standalone-gen-dev/generator-stub-docker.sh -O generator-stub-docker.sh
        chmod +x *.sh
        # generated initial stub: -p <root package> -n <generator name>
        #./generator-stub-docker.sh -p io.swagger.codegen.custom -n custom
        wget https://raw.githubusercontent.com/swagger-api/swagger-codegen/master/modules/swagger-codegen/src/test/resources/2_0/petstore.yaml -O petstore.yaml
        wget https://raw.githubusercontent.com/swagger-api/swagger-codegen/master/standalone-gen-dev/run-in-docker.sh -O run-in-docker.sh
        wget https://raw.githubusercontent.com/swagger-api/swagger-codegen/master/standalone-gen-dev/docker-entrypoint.sh -O docker-entrypoint.sh
        chmod +x *.sh
        #./run-in-docker.sh generate -i petstore.yaml -l custom -o /gen/$GENERATED_CODE_DIR
    - name: API Generation 1
      uses: actions/checkout@v2
    - name: API Generation 2
      uses: addnab/docker-run-action@v3
      with:
        registry: gcr.io
        image: openjdk:8-jre-alpine
        options: -w /gen -e GEN_DIR=/gen -v ${{ env.GITHUB_WORKSPACE }}:/gen
        run: |
          ./docker-stub.sh -p io.swagger.codegen.custom -n custom
  
  # References: https://hyperledger-fabric.readthedocs.io/en/latest/getting_started.html
  #             https://github.com/hyperledger/fabric-samples/tree/main/test-network-k8s
  prerequisites:
    runs-on: ubuntu-latest
    env:
      AGNOSTIC_SETUP_DIR: setup/agnostic
      AGNOSTIC_CLEANUP_DIR: cleanup/agnostic
      UBUNTU_SETUP_DIR: setup/ubuntu
      RHEL_SETUP_DIR: setup/rhel
    steps:
    - uses: actions/checkout@v2
    - name: Setup local
      run: |
        source ${AGNOSTIC_SETUP_DIR}/local_source
        ${AGNOSTIC_SETUP_DIR}/local_setup.sh
    - name: Get kubectl
      run: ${AGNOSTIC_SETUP_DIR}/get_kubectl.sh
    - name: Get kind
      run: ${AGNOSTIC_SETUP_DIR}/get_kind.sh
    - name: Get jq
      run: ${AGNOSTIC_SETUP_DIR}/get_jq.sh
    - name: Update package manager
      run: ${UBUNTU_SETUP_DIR}/update_package_manager.sh
    - name: Get prerequisite tools
      run: ${UBUNTU_SETUP_DIR}/get_prerequisite_tools.sh
    - name: Get Docker
      run: ${UBUNTU_SETUP_DIR}/get_docker.sh
    - name: Setup Docker
      run: ${AGNOSTIC_SETUP_DIR}/setup_docker.sh
    - name: Setup Test Network for Hyperledger
      run: ${AGNOSTIC_SETUP_DIR}/setup_hyperledger.sh
    - name: Cleanup
      run: ${AGNOSTIC_CLEANUP_DIR}/cleanup_hyperledger.sh

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Install shellspec
      run: curl -fsSL https://git.io/shellspec | sh -s 0.28.1 --yes
    - name: Execute shellspec
      run: shellspec

  PrerequisiteRootCA:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v2
    - name: Create Root Certificate Authority (CA)
      env:
        ROOT_PASSPHRASE: ${{ secrets.ROOT_PASSPHRASE }}
      run: |
        ROOT_RESULTS_FILE_NAME="rootCAResults.json"
        COUNTRY_CODE="AU"
        STATE="WA"
        LOCATION="Northbridge"
        ORGANIZATION="Hotels"
        ORGANIZATIONAL_UNIT="Fancy"
        ROOT_COMMON_NAME="Yet another root cert authority"
        OUTPUT_DIR="."
        
        ./certificates/generateRootCA/bin/generateRootCA.sh -f "$ROOT_RESULTS_FILE_NAME" -p "$ROOT_PASSPHRASE" -o "$OUTPUT_DIR" -c "$COUNTRY_CODE" -s "$STATE" -l "$LOCATION" -r "$ORGANIZATION" -u "$ORGANIZATIONAL_UNIT" -n "$ROOT_COMMON_NAME"
        openssl x509 -text -noout -in rootCACert.pem

  # docker:
  #   #needs: PrerequisiteRootCA
  #   runs-on: ubuntu-latest
  #   services:
  #     registry:
  #       image: registry:2
  #       ports:
  #         - 5000:5000
  #   steps:
  #     -
  #       name: Checkout
  #       uses: actions/checkout@v2
  #     -
  #       name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #     -
  #       name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #       with:
  #         driver-opts: network=host
  #     -
  #       name: Build and push to local registry
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         push: true
  #         tags: localhost:5000/name/chaordic-ledger:latest
  #         #tags: localhost:5000/name/chaordic-ledger:$(date +%s)
  #     -
  #       name: Inspect
  #       run: |
  #         docker buildx imagetools inspect localhost:5000/name/chaordic-ledger:latest

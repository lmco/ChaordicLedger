{
  "swagger": "2.0",
  "info": {
    "description": "This is the API for ChaordicLedger.",
    "version": "1.0.0",
    "title": "ChaordicLedger API",
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "tags": [
    {
      "name": "Artifacts",
      "description": "Operations regarding artifacts."
    },
    {
      "name": "Blockchain",
      "description": "Operations regarding the blockchain."
    },
    {
      "name": "Metadata",
      "description": "Operations regarding metadata."
    },
    {
      "name": "Relationships",
      "description": "Operations regarding relationships between artifacts."
    },
    {
      "name": "SystemTest",
      "description": "Operations applicable only to system testing."
    }
  ],
  "schemes": [
    "http"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/blockchain/getLatestBlock": {
      "get": {
        "summary": "Gets the details from the latest block in the chain.",
        "description": "Gets the details from the latest block in the chain.",
        "operationId": "getLatestBlock",
        "tags": [
          "Blockchain"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A JSON representation of block data.",
            "schema": {
              "$ref": "#/definitions/BlockData"
            }
          }
        }
      }
    },
    "/blockchain/getNumberedBlock/{blocknumber}": {
      "get": {
        "summary": "Gets the details from a block in the chain.",
        "description": "Gets the details from a block in the chain.",
        "operationId": "getNumberedBlock",
        "tags": [
          "Blockchain"
        ],
        "parameters": [
          {
            "name": "blocknumber",
            "in": "path",
            "description": "Zero-based block index",
            "required": true,
            "type": "integer",
            "minimum": 0
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A JSON representation of block data.",
            "schema": {
              "$ref": "#/definitions/BlockData"
            }
          }
        }
      }
    },
    "/blockchain/getTransactionDetails/{transactionID}": {
      "get": {
        "summary": "Gets the details from a block in the chain.",
        "description": "Gets the details from a block in the chain.",
        "operationId": "getTransactionDetails",
        "tags": [
          "Blockchain"
        ],
        "parameters": [
          {
            "name": "transactionID",
            "in": "path",
            "description": "The transaction's ID",
            "required": true,
            "type": "string",
            "minimum": 0
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A JSON representation of the transaction.",
            "schema": {
              "$ref": "#/definitions/TransactionData"
            }
          }
        }
      }
    },
    "/artifacts/createArtifact": {
      "post": {
        "summary": "Creates a new artifact.",
        "description": "Creates a new artifact.",
        "operationId": "createArtifact",
        "tags": [
          "Artifacts"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "upfile",
            "type": "file",
            "description": "The file to upload."
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/artifacts/createArtifactAsync": {
      "post": {
        "summary": "Creates a new artifact asynchronously.",
        "description": "Creates a new artifact asynchronously.",
        "operationId": "createArtifactAsync",
        "tags": [
          "Artifacts"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "upfile",
            "type": "file",
            "description": "The file to upload."
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/artifacts/getArtifactObject": {
      "get": {
        "summary": "Gets an existing artifact.",
        "description": "Gets an existing artifact.",
        "operationId": "getArtifactObject",
        "tags": [
          "Artifacts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "artifactID",
            "in": "query",
            "description": "ID of artifact to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Artifact not found"
          }
        }
      }
    },
    "/artifacts/getArtifactAtPath": {
      "get": {
        "summary": "Gets an existing artifact.",
        "description": "Gets an existing artifact.",
        "operationId": "getArtifactAtPath",
        "tags": [
          "Artifacts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "artifactPath",
            "in": "query",
            "description": "ID of artifact to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Artifact not found"
          }
        }
      }
    },
    "/artifacts/deleteArtifactAtPath": {
      "delete": {
        "summary": "Deletes an existing artifact.",
        "description": "Deletes an existing artifact.",
        "operationId": "deleteArtifactAtPath",
        "tags": [
          "Artifacts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "artifactPath",
            "in": "query",
            "description": "Artifact path to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Artifact metadata not found"
          }
        }
      }
    },
    "/artifacts/listArtifactsAtPath": {
      "get": {
        "summary": "Gets the list of artifacts at the given path.",
        "description": "Gets the list of artifacts at the given path.",
        "operationId": "listArtifactsAtPath",
        "tags": [
          "Artifacts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Path to list",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Path not found"
          }
        }
      }
    },
    "/artifacts/listAllArtifacts": {
      "get": {
        "summary": "Gets the list of existing artifacts",
        "description": "Gets the list of existing artifacts",
        "operationId": "listAllArtifacts",
        "tags": [
          "Artifacts"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/metadata/createArtifactMetadata": {
      "post": {
        "summary": "Creates a new metadata item.",
        "description": "Creates a new metadata item.",
        "operationId": "createArtifactMetadata",
        "deprecated": true,
        "tags": [
          "Metadata"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Metadata object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ArtifactMetadata"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/metadata/getAllArtifactMetadata": {
      "get": {
        "summary": "Retrieves all known metadata.",
        "description": "Retrieves all known metadata.",
        "operationId": "getAllArtifactMetadata",
        "deprecated": true,
        "tags": [
          "Metadata"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A JSON array of artifact metadata",
            "schema": {
              "$ref": "#/definitions/ArtifactMetadata"
            }
          },
          "default": {
            "description": "Unexpected Error"
          }
        }
      }
    },
    "/metadata/deleteArtifactMetadata/{metadataID}": {
      "delete": {
        "summary": "Deletes an existing metadata item.",
        "description": "Deletes an existing metadata item.",
        "operationId": "deleteArtifactMetadata",
        "deprecated": true,
        "tags": [
          "Metadata"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "metadataID",
            "in": "path",
            "description": "Artifact metadata ID to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Artifact metadata not found"
          }
        }
      }
    },
    "/relationships/getRelationshipGraph": {
      "get": {
        "summary": "Gets the relationships between artifacts.",
        "description": "Gets the relationships between artifacts.",
        "operationId": "getRelationshipGraph",
        "tags": [
          "Relationships"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "File not found"
          }
        }
      }
    },
    "/relationships/createRelationship": {
      "post": {
        "summary": "Creates a new relationship between nodes.",
        "description": "Creates a new relationship between nodes.",
        "operationId": "createRelationship",
        "tags": [
          "Relationships"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Relationship to be established",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/relationships/createNode": {
      "post": {
        "summary": "Creates a new node.",
        "description": "Creates a new node.",
        "operationId": "createNode",
        "tags": [
          "Relationships"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Node to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Node"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/systemtest/resetArtifacts": {
      "delete": {
        "summary": "Clears all artifacts.",
        "description": "Clears artifacts.",
        "operationId": "resetArtifacts",
        "tags": [
          "SystemTest"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ok"
          }
        }
      }
    },
    "/systemtest/resetRelationships": {
      "delete": {
        "summary": "Clears all nodes and relationships.",
        "description": "Clears all nodes and relationships.",
        "operationId": "resetRelationships",
        "tags": [
          "SystemTest"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ok"
          }
        }
      }
    }
  },
  "definitions": {
    "Artifact": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "base64content": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "BlockData": {
      "type": "string"
    },
    "TransactionData": {
      "type": "string"
    },
    "ArtifactMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Node": {
      "type": "object",
      "properties": {
        "nodeid": {
          "type": "string",
          "minLength": 1
        },
        "fileid": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Relationship": {
      "type": "object",
      "properties": {
        "nodeida": {
          "type": "string",
          "minLength": 1
        },
        "nodeidb": {
          "type": "string",
          "minLength": 1
        }
      }
    }
  }
}
